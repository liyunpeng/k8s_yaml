[master@212-node kubernetes]$ ll
总用量 32
-rw------- 1 root root 5449 1月   7 22:15 admin.conf
-rw------- 1 root root 5489 1月   7 22:15 controller-manager.conf
-rw------- 1 root root 1869 1月   7 22:16 kubelet.conf
drwxr-xr-x 2 root root  113 1月  11 08:04 manifests
drwxr-xr-x 3 root root 4096 1月   7 22:15 pki
-rw------- 1 root root 5437 1月   7 22:15 scheduler.conf


[master@212-node kubernetes]$ sudo cat manifests/kube-apiserver.yaml
[sudo] master 的密码：
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=192.168.0.212
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/etc/kubernetes/pki/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
    - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
    - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --insecure-port=0
    - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
    - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
    - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/etc/kubernetes/pki/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
    image: registry.aliyuncs.com/google_containers/kube-apiserver:v1.17.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: 192.168.0.212
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /etc/ssl/certs
      name: ca-certs
      readOnly: true
    - mountPath: /etc/pki
      name: etc-pki
      readOnly: true
    - mountPath: /etc/kubernetes/pki
      name: k8s-certs
      readOnly: true
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /etc/ssl/certs
      type: DirectoryOrCreate
    name: ca-certs
  - hostPath:
      path: /etc/pki
      type: DirectoryOrCreate
    name: etc-pki
  - hostPath:
      path: /etc/kubernetes/pki
      type: DirectoryOrCreate
    name: k8s-certs

------------------------
kubeadm
来自于 https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init-phase/

kubeadm init phase
kubeadm 初始化启动前检查阶段
kubeadm 初始化启动 kubelet 阶段
kubeadm 初始化证书阶段
kubeadm 初始化 kubeconfig 阶段
kubeadm 初始化 control-plane 阶段
kubeadm 初始化 etcd 阶段
kubeadm 初始化上传 config 配置阶段
kubeadm 初始化上传证书阶段
kubeadm 初始化标记控制平面阶段
kubeadm 初始化引导令牌阶段
kubeadm 初始化插件阶段

kubeadm init phase 能确保调用引导过程的原子步骤。因此，如果希望自定义应用，则可以让 kubeadm 做一些工作，然后填补空白。

kubeadm init phase 与 kubeadm init 工作流程一致，后台都使用相同的代码。

kubeadm 初始化启动前检查阶段
使用此命令可以在控制平面节点上执行启动前检查。

preflight
概要
运行 kubeadm init 前的启动检查。

kubeadm init phase preflight [flags]
案例
  # 使用配置文件对 kubeadm init 进行启动检查。
  kubeadm init phase preflight --config kubeadm-config.yml
选项
--config string
kubeadm 配置文件的路径。
-h, --help
preflight 操作的帮助命令
--ignore-preflight-errors stringSlice
错误将显示为警告的检查列表：例如：'IsPrivilegedUser,Swap'。取值为 'all' 时将忽略检查中的所有错误。
继承于父命令的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
查看其它

kubeadm init phase - 使用此命令可以调用 init 工作流程的单个阶段
kubeadm 初始化启动 kubelet 阶段
此阶段将检查 kubelet 配置文件和环境文件，然后启动 kubelet。

kubelet-start
概要
使用 kubelet 配置文件编写一个文件，并使用特定节点的 kubelet 设置编写一个环境文件，然后（重新）启动 kubelet。

kubeadm init phase kubelet-start [flags]
示例
  # 从 InitConfiguration 文件中写入带有 kubelet 参数的动态环境文件。
  kubeadm init phase kubelet-start --config config.yaml
选项
--config string
kubeadm 配置文件的路径。
--cri-socket string
连接到 CRI 套接字的路径。如果为空，则 kubeadm 将尝试自动检测该值；仅当安装了多个 CRI 或具有非标准 CRI 套接字时，才使用此选项。
-h, --help
kubelet-start 操作的帮助命令
--node-name string
指定节点名称。
从父命令继承的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
查看其他

kubeadm init phase - 使用此命令可以调用 init 工作流程的单个阶段
kubeadm 初始化证书阶段
该阶段可用于创建 kubeadm 所需的所有证书。

certsallcaapiserverapiserver-kubelet-clientfront-proxy-cafront-proxy-clientetcd-caetcd-serveretcd-peerhealthcheck-clientapiserver-etcd-clientsa
概要
生成用于为 etcd 设置身份的自签名 CA，并将其保存到 etcd/ca.cert 和 etcd/ca.key 文件中。

如果两个文件都已存在，则 kubeadm 将跳过生成步骤，使用现有文件。

Alpha 免责声明：此命令当前为 Alpha 功能。

kubeadm init phase certs etcd-ca [flags]
选项
--cert-dir string     默认值："/etc/kubernetes/pki"
证书的存储路径。
--config string
kubeadm 配置文件的路径。
-h, --help
etcd-ca 操作的帮助命令
--kubernetes-version string     默认值："stable-1"
为控制平面选择特定的 Kubernetes 版本。
继承于父命令的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
kubeadm 初始化 kubeconfig 阶段
可以通过调用 all 子命令来创建所有必需的 kubeconfig 文件，或者分别调用它们。

kubeconfigalladminkubeletcontroller-managerscheduler
概要
此命令并非设计用来单独运行。请阅读可用子命令列表。

kubeadm init phase kubeconfig [flags]
选项
-h, --help
kubeconfig 操作的帮助命令
从父命令继承的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
查看其他

kubeadm init phase - 使用此命令可以调用 init 工作流程的单个阶段
kubeadm init phase kubeconfig admin - 为管理员和 kubeadm 本身生成一个 kubeconfig 文件
kubeadm init phase kubeconfig all - 生成所有 kubeconfig 文件
kubeadm init phase kubeconfig controller-manager - 生成 kubeconfig 文件给控制器管理器使用
kubeadm init phase kubeconfig kubelet - 为 kubelet 生成 kubeconfig 文件，*仅*用于集群引导
kubeadm init phase kubeconfig scheduler - 生成 kubeconfig 文件给调度程序使用
kubeadm 初始化 control-plane 阶段
使用此阶段，可以为控制平面组件创建所有必需的静态 Pod 文件。

control-planeallapiservercontroller-managerscheduler
概要
此命令并非设计用来单独运行。请参阅可用子命令列表。

kubeadm init phase control-plane [flags]
选项
-h, --help
control-plane 操作的帮助命令
继承于父命令的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
查看其它

kubeadm init phase - 使用此命令可以调用 init 工作流程的单个阶段
kubeadm init phase control-plane all - 生成所有静态 Pod 清单文件
kubeadm init phase control-plane apiserver - 生成 kube-apiserver 静态 Pod 清单
kubeadm init phase control-plane controller-manager - 生成 kube-controller-manager 静态 Pod 清单
kubeadm init phase control-plane scheduler - 生成 kube-scheduler 静态 Pod 清单
kubeadm 初始化 etcd 阶段
根据静态 Pod 文件，使用以下阶段创建本地 etcd 实例。

etcdlocal
概要
此命令并非设计用来单独运行。请参阅可用子命令列表。

kubeadm init phase etcd [flags]
选项
-h, --help
etcd 操作的帮助命令
继承于父命令的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
kubeadm 初始化上传 config 配置阶段
可以使用此命令将 kubeadm 配置文件上传到集群。或者，使用 kubeadm config 方式。

upload-configallkubeadmkubelet
概要
此命令并非设计用来单独运行。请参阅可用的子命令列表。

kubeadm init phase upload-config [flags]
选项
-h, --help
upload-config 操作的帮助命令
从父命令中继承的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
查看其他

kubeadm init phase - 使用此命令可以调用 init 工作流程的单个阶段
kubeadm init phase upload-config all - 将所有的配置上传到 ConfigMap 中
kubeadm init phase upload-config kubeadm - 将 kubeadm 的集群配置上传到 ConfigMap 中
kubeadm init phase upload-config kubelet - 将 kubelet 的组件配置上传到 ConfigMap 中
kubeadm 初始化上传证书阶段
使用以下阶段将控制平面证书上传到集群。默认情况下，证书和加密密钥会在两个小时后过期。

upload-certs
概要
此命令并非设计用来单独运行。请参阅可用子命令列表。

kubeadm init phase upload-certs [flags]
选项
--certificate-key string
用于加密 kubeadm-certs Secret 中的控制平面证书的密钥。
--config string
kubeadm 配置文件的路径。
-h, --help
upload-certs 操作的帮助命令
--skip-certificate-key-print
不要打印输出用于加密控制平面证书的密钥。
--upload-certs
将控制平面证书上传到 kubeadm-certs Secret。
从父命令继承的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
查看其他

kubeadm init phase - 使用此命令可以调用 init 工作流程的单个阶段
kubeadm 初始化标记控制平面阶段
使用以下阶段来给具有 node-role.kubernetes.io/master="" 键值对的节点打标签（label）和记录污点（taint）。

mark-control-plane
概要
标记 Node 节点为控制平面节点

kubeadm init phase mark-control-plane [flags]
示例
  # 将控制平面标签和污点应用于当前节点，其功能等效于 kubeadm init执行的操作。
  kubeadm init phase mark-control-plane --config config.yml

  # 将控制平面标签和污点应用于特定节点
  kubeadm init phase mark-control-plane --node-name myNode
选项
--config string
kubeadm 配置文件的路径。
-h, --help
mark-control-plane 操作的帮助命令
--node-name string
指定节点名称。
从父命令继承的选项
--rootfs 字符串
[实验] 到 '真实' 主机根文件系统的路径。
查看其他

kubeadm init phase - 使用此命令调用 init 工作流程的单个阶段
kubeadm 初始化引导令牌阶段
使用以下阶段来配置引导令牌。

bootstrap-token
概要
启动引导令牌（bootstrap token）用于在即将加入集群的节点和控制平面节点之间建立双向信任。

该命令使启动引导令牌（bootstrap token）所需的所有配置生效，然后创建初始令牌。

kubeadm init phase bootstrap-token [flags]
示例
  # 进行所有引导令牌配置，并创建一个初始令牌，功能上与 kubeadm init 生成的令牌等效。
  kubeadm init phase bootstrap-token
选项
--config string
kubeadm 配置文件的路径。
-h, --help
bootstrap-token 操作的帮助命令
--kubeconfig string     默认值："/etc/kubernetes/admin.conf"
用于和集群通信的 kubeconfig 文件。如果它没有被设置，那么 kubeadm 将会搜索一个已经存在于标准路径的 kubeconfig 文件。
--skip-token-print
跳过打印 'kubeadm init' 生成的默认引导令牌。
继承于父命令的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
查看其它

kubeadm init phase - 使用此命令可以调用 init 工作流程的某个阶段
kubeadm 初始化插件阶段
可以使用 all 子命令安装所有可用的插件，或者有选择性地安装它们。

addonallcorednskube-proxy
概要
此命令并非设计用来单独运行。请参阅可用子命令列表。

kubeadm init phase addon [flags]
选项
-h, --help
addon 操作的帮助命令
继承于父命令的选项
--rootfs string
[实验] 到 '真实' 主机根文件系统的路径。
查看其它

kubeadm init phase - 使用此命令可以调用 init 工作流程的单个阶段
kubeadm init phase addon all - 安装所有的插件
kubeadm init phase addon coredns - 将 CoreDNS 插件安装到 Kubernetes 集群
kubeadm init phase addon kube-proxy - 将 kube-proxy 插件安装到 Kubernetes 集群
要使用 kube-dns 代替 CoreDNS，必须传递一个配置文件：

# 仅用于安装 DNS 插件
kubeadm init phase addon coredns --config=someconfig.yaml
# 用于创建完整的控制平面节点
kubeadm init --config=someconfig.yaml
# 用于列出或者拉取镜像
kubeadm config images list/pull --config=someconfig.yaml
# 升级
kubeadm upgrade apply --config=someconfig.yaml
该文件必须在 ClusterConfiguration 中包含一个 DNS 字段，以及包含一个插件的类型 - kube-dns（默认值为 CoreDNS）。

apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
dns:
  type: "kube-dns"
有关 v1beta2 配置中每个字段的更多详细信息，可以访问 API。

接下来
kubeadm init 引导 Kubernetes 控制平面节点
kubeadm join 将节点连接到集群
kubeadm reset 恢复通过 kubeadm init 或 kubeadm join 操作对主机所做的任何更改
kubeadm alpha 尝试实验性功能

-----------------------------------------------------------------
[master@212-node centos8]$ kubeadm config view -h

Using this command, you can view the ConfigMap in the cluster where the configuration for kubeadm is located.

The configuration is located in the "kube-system" namespace in the "kubeadm-config" ConfigMap.

Usage:
  kubeadm config view [flags]

Flags:
  -h, --help   help for view

Global Flags:
      --add-dir-header           If true, adds the file directory to the header
      --kubeconfig string        The kubeconfig file to use when talking to the cluster. If the flag is not set, a set of standard locations can be searched for an existing kubeconfig file. (default "/etc/kubernetes/admin.conf")
      --log-file string          If non-empty, use this log file
      --log-file-max-size uint   Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)
      --rootfs string            [EXPERIMENTAL] The path to the 'real' host root filesystem.
      --skip-headers             If true, avoid header prefixes in the log messages
      --skip-log-headers         If true, avoid headers when opening log files
  -v, --v Level                  number for the log level verbosity
[master@212-node centos8]$ kubeadm config images list
W0111 10:21:20.400324  129473 version.go:101] could not fetch a Kubernetes version from the internet: unable to get URL "https://dl.k8s.io/release/stable-1.txt": Get https://dl.k8s.io/release/stable-1.txt: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)
W0111 10:21:20.400455  129473 version.go:102] falling back to the local client version: v1.17.0
W0111 10:21:20.400679  129473 validation.go:28] Cannot validate kube-proxy config - no validator is available
W0111 10:21:20.400701  129473 validation.go:28] Cannot validate kubelet config - no validator is available
k8s.gcr.io/kube-apiserver:v1.17.0
k8s.gcr.io/kube-controller-manager:v1.17.0
k8s.gcr.io/kube-scheduler:v1.17.0
k8s.gcr.io/kube-proxy:v1.17.0
k8s.gcr.io/pause:3.1
k8s.gcr.io/etcd:3.4.3-0
k8s.gcr.io/coredns:1.6.5


--------------------------------------
生成kubeadm1.yaml配置模板
[master@212-node centos8]$  kubeadm config print init-defaults > kubeadm1.yaml
[master@212-node centos8]$ cat kubeadm1.yaml
apiVersion: kubeadm.k8s.io/v1beta2
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: abcdef.0123456789abcdef
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 1.2.3.4  需手动修改为192.168.0.212
  bindPort: 6443
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  name: 212-node
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
---
apiServer:
  timeoutForControlPlane: 4m0s
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controllerManager: {}
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
imageRepository: k8s.gcr.io
kind: ClusterConfiguration
kubernetesVersion: v1.17.0
networking:
  dnsDomain: cluster.local
  serviceSubnet: 10.96.0.0/12    手动修改为192.169.0.0/16
scheduler: {}

----------
用配置启动master
kubeadm init --config kubeadm1.yaml
如果不用配置，则：
kubeadm init --pod-network-cidr=192.169.0.0/16 \
--apiserver-advertise-address=$IP_ADDR \
--kubernetes-version  stable-1.16 \
--ignore-preflight-errors=Swap \
--image-repository registry.aliyuncs.com/google_containers

