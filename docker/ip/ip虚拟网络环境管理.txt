为了叙述方便， namespace简称ns,  ip的ns就是虚拟网络环境
ip 有ns,  链路层， 地址， ip 有三类命令：
操作ns的用ip nets,  操作链路层的用ip link, 操作ip地址的用ip link, 

ip nets ：
可以创建ns,  如 ip netns add ns1
可以在ns空间上， 执行命令 ip netns exec ， 如:
打开虚拟网络环境 
ip netns exec ns bash
在虚拟网络环境里启动添加好的网卡
ip netns exec ns ip link set dev veth-a up
在虚拟网络环境中为网卡分配ip地址
ip netns exec ns ip addr add 10.1.2.3 dev veth-a
小总结： 在虚拟网络可以执行的命令bash打开交互窗口， 对网卡操作的ip link，
对地址操作的ip addr.  可以说， 一切在本机环境里操作的网络命令都可以在
虚拟网络环境里操作。 命令格式中的， 前面的ip netns exec ns名是不变的，
表示在虚拟网络环境里执行， 平常的命令没有这些，就是在本机环境里执行。 
虚拟网络环境和本机环境的命令的区别就看前面有没有ip netns exec ns名
在虚拟网路环境的bash窗口里可以使用本机的一切命令


ip link:
网卡设备是链路层的东西，ip link 可以创建虚拟网卡， 一般一次性创建
两个互联的网卡，
如创建veth peer两个网卡设备 veth-a, veth-b
ip link add veth-a type veth peer name veth-b
就这么奇怪的写法， 不多纠结
把网卡veth-a放到网络虚拟环境ns1里
ip link set veth-a nets ns1


打开虚拟网络环境mytest的bash窗口
user1@ubuntu:~$ sudo ip netns exec mytest bash
root@ubuntu:~# ls
a  core     Documents  examples.desktop  Pictures  snap       Videos
b  Desktop  Downloads  Music             Public    Templates
root@ubuntu:~# ifconfig
无任何显示， 因为没有网卡
root@ubuntu:~# exit  // 退出mytest 的bash

启动回环设备：
user1@ubuntu:~$ sudo ip netns exec mytest ip link set dev lo up
再进到mytest的bash看
user1@ubuntu:~$ sudo ip netns exec mytest bash
root@ubuntu:~# ifconfig
lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
以上是sudo ip netns exec mytest ip link set dev lo up建立回环设备的结果
 







