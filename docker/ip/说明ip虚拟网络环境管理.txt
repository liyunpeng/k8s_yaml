为了叙述方便， namespace简称ns,  ip的ns就是虚拟网络环境
ip命令可以操作的有链路层，虚拟网络环境, ip地址
响应的ip命令有三类选项：
操作链路层的用link选项，操作虚拟网络环境的nets选项, 操作ip地址的link选项
=============================================================================
先说nets选项
nets选项可以创建虚拟网路环境,  如：
$ ip netns add ns1
这样就创建了虚拟网络环境ns1

进入到虚拟网络环境shell交互： 
$ sudo ip netns exec ns1 bash
root@lfgphicprd19011:/# ls
bin  boot  dev  etc  home  initrd.img  lib  lib32  lib64  libx32  lost+found  media  mnt  opt  proc  root  run  sbin  snap  srv  sys  tmp  usr  var  vmlinuz
root@lfgphicprd19011:/# ifconfig
ifconfig显示为空， 说明当前的网络环境没有带有地址的网卡

root@lfgphicprd19011:/# ip a  
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
只有一个回环设备， 但没有启动
启动回环设备：
user1@ubuntu:~$ sudo ip netns exec ns1 ip link set dev lo up
再进到mytest的bash看
user1@ubuntu:~$ sudo ip netns exec ns1 bash
root@ubuntu:~# ifconfig
lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
以上是sudo ip netns exec mytest ip link set dev lo up建立回环设备的结果

================================================================================
link选项：
为了给虚拟网络环境添加网卡， 需要link选项操作链路层以创建网卡，然后link选项把这个网卡添加到虚拟网络环境。
网卡设备是链路层的东西，link选项可以创建虚拟网卡， 一般一次性创建两个互联的网卡，
如创建veth peer两个互联的网卡设备 veth-a, veth-b：
$ ip link add veth-a type veth peer name veth-b   
默认两个互联的网卡，都在本机中，本机也是一个网络环境。
两个网络环境，不管是虚拟的还是物理的， 都必须都拥有网卡，然后通过网卡通讯。
网卡并不一定是物理上的网卡，是软件上创建出来的网卡。
我们需要把veth-a 网卡需要添加到虚拟网络环境, veth-b网卡维持在本机中。
这样虚拟网络环境和本机才有了链路层通讯的基础。

现在把创建好的网卡veth-a添加到网络虚拟环境ns1里
$ ip link set veth-a nets ns1
链路层需要操作的就是这两个动作，创建一对互联的网卡，把网卡添加到网络环境中
===============================================================================
好了再回到nets选项：
link选项已经把网卡veth-a 添加到了虚拟网络环境ns1，
现在就要在虚拟网络环境ns1启动已添加到本网络环境的网卡veth-a：
$ ip netns exec ns1 ip link set dev veth-a up

网卡启动了， 就可以为这个网卡分配ip地址. 分配地址需要用addr选项。
==========================================================================
addr选项：
addr 选项最主要的作用是为网卡设置地址， 
如为网卡ens设置ip地址为192.168.0.123：
$ ip addr add 192.168.0.123 dev ens33
这是对本机网络环境的设置，如果需要在指定的网络环境设置，需要在前面加上ip netns exec 虚拟网络环境的ns名字
所以对虚拟网络环境ns1的网卡veth-a设置地址的命令就是：
$ ip netns exec ns ip addr add 192.168.0.211 dev veth-a

ip netns 创建的虚拟网络环境 与本地的网路环境， 只是网络环境的隔离， 文件系统和进程都没有隔离 
文件系统不隔离， 意味着看到的文件系统是和宿主机完全相同的， 而且宿主机的所有命令也是在虚拟网络环境同样适用, 如：
$ sudo ip netns exec ns1 bash
root@lfgphicprd19011:~/# cd
root@lfgphicprd19011:~# ls /home
master  // 宿主机的用户目录
root@lfgphicprd19011:~# echo a > /home/master/1.txt
除了网络相关的命令， 其他命令产生的结果也会直接作用到宿主机, 这个命令在宿主机也会产生一个1.txt文件
ip link，ip addr. 这样的命令虚拟网络环境里操作不会影响到宿主机，因为虚拟网络环境和宿主机网络环境是相互隔离的

进程不隔离， 意味着宿主机的所有进程在虚拟网络环境同样可见， 如
root@lfgphicprd19011:~/# top 
看到的进程和宿主机是相同的。 


docker的意义在于实现网络环境，进程，文件系统等所有资源的隔离， 以极轻量化方式实现了虚拟机效果， 为服务集群部署提供了高效而稳固的基础。 
由于docker的容器副本的维护还礼，容器所需的环境变量管理，为请求调度到合适的容器的负载均衡，高峰访问事的容器集群的自动扩容管理等等对容器的各种层面的管理
针对对容器这么多管理的需要，google就研究了一个专门对容器进行各种管理的k8s系统。 目前都一致认为是未来分布式集群的架构方向，而且现在很多公司已经把k8s应用到生产环境。 

一般习惯都是在宿主机操作在虚拟网络环境， 这样可以编写shell脚本。
操作虚拟网络环境都有这样的前缀
$ ip netns exec 虚拟网络环境的ns名 
后面的命令和宿主机是一样的，比如
$ ip netns exec ns1 ifconfig
可以看到启动的网卡，启动的网卡才有ip地址。没有启动的网卡，不会被ifconfig看到
